name: CI/CD Pipeline

on:
  # 1) Run Build & Test on pushes to any branch **except** dev or main.
  push:
    branches-ignore:
      - dev
      - main

  # 2) Run "Build & Push Artifact" on Pull Requests that target dev or main.
  pull_request:
    branches:
      - dev
      - main

  # 3) Manual trigger to deploy (dev, stage, or prod).
  workflow_dispatch:
    inputs:
      environment:
        description: "Select the deployment environment"
        required: true
        type: choice
        options:
          - dev
          - stage
          - prod

jobs:
  # ---------------------------------------
  # JOB 1: Build & Test (feature branches)
  # ---------------------------------------
  build-test-feature:
    if: ${{ github.event_name == 'push' }}  # Only run on direct pushes (i.e. feature branches)
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          echo "Running tests for feature branch..."
          # e.g.: pytest --maxfail=1 --disable-warnings -q

  # -------------------------------------------------
  # JOB 2: Build & Push Artifact (PR to dev or main)
  # -------------------------------------------------
  build-push-artifact:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    # This job starts after the PR is successfully merged. 
    # If you want it to run only after the PR is merged, 
    # you'll rely on your actual merge event or you can do "if: ... github.event.pull_request.merged == true", 
    # but that is more advanced. Typically you'd run the build on the PR, then push only on merges. 
    # Adjust logic if needed. 
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set environment (dev or prod)
        id: envname
        run: |
          # If base branch is dev => environment=dev else main => environment=prod
          if [ "${{ github.event.pull_request.base.ref }}" = "dev" ]; then
            echo "env=dev" >> $GITHUB_OUTPUT
          else
            echo "env=prod" >> $GITHUB_OUTPUT
          fi

      - name: Build Docker image
        run: |
          # Tag the image based on environment and the commit SHA
          echo "Building Docker image for ${{ steps.envname.outputs.env }} environment..."
          docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/saas-app-${{ steps.envname.outputs.env }}:${{ github.sha }} .

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Push Docker image
        run: |
          echo "Pushing Docker image to GCR..."
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/saas-app-${{ steps.envname.outputs.env }}:${{ github.sha }}

  # -----------------------------------
  # JOB 3: Manual Deploy to GCP
  # -----------------------------------
  deploy:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Determine artifact tag
        id: artifact
        run: |
          # Determine which Docker image to deploy based on environment chosen
          DEPLOY_ENV="${{ github.event.inputs.environment }}"
          if [ "$DEPLOY_ENV" = "dev" ]; then
            # e.g., use 'latest' or the last dev commit SHA you track
            IMAGE_TAG="gcr.io/${{ secrets.GCP_PROJECT_ID }}/saas-app-dev:latest"
          else
            # for stage or prod, typically we use the 'prod' artifact
            # could also maintain separate images for stage vs. prod if you prefer
            IMAGE_TAG="gcr.io/${{ secrets.GCP_PROJECT_ID }}/saas-app-prod:latest"
          fi

          echo "Chosen environment: $DEPLOY_ENV"
          echo "Using image tag: $IMAGE_TAG"
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Configure gcloud
        run: |
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          gcloud --version

      - name: Deploy to App Engine
        uses: google-github-actions/deploy-appengine@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          deliverables: app.yaml
          # If you want to override the Docker image in app.yaml, you might specify:
          # version: ${{ github.event.inputs.environment }}-$(date +%Y%m%d%H%M%S)
          # Or pass in extra_args for image_url if your app.yaml is set up to allow that. 
          # For advanced usage, see:
          # https://github.com/google-github-actions/deploy-appengine
